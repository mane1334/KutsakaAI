"""
Interface Streamlit do AgenteIA
"""

import streamlit as st
import streamlit.components.v1 as components
from pathlib import Path
import json
from datetime import datetime
import requests
import subprocess
from typing import List, Tuple, Dict, Any
import os
import pandas as pd
import time
from gtts import gTTS
import tempfile
import queue
import threading
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass
import re

import logging
import json
import os
import re
import subprocess
import sys
import threading
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple, Union

import requests

from agenteia import AgenteIA
from agenteia.core.config import CONFIG
from agenteia.logs import setup_logging
from agenteia.core.ferramentas import ListarUnidades, ListarArquivos

# Configurar logging
logger = setup_logging(__name__)

st.set_page_config(
    page_title="AgenteIA - Seu Assistente Inteligente",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fila global para requisi√ß√µes
request_queue = queue.Queue()
processing_lock = threading.Lock()
request_status = {}  # Dicion√°rio para rastrear status das requisi√ß√µes
active_requests = set()  # Conjunto para rastrear requisi√ß√µes ativas

# Definir system_message global
system_message = """
Voc√™ √© um assistente virtual inteligente.
Voc√™ pode ajudar com v√°rias tarefas.

Ferramentas dispon√≠veis:

1. Manipula√ß√£o de Arquivos:
   - listar_arquivos - Lista arquivos e diret√≥rios em um caminho
   - escrever_arquivo - Cria ou modifica um arquivo
   - criar_diretorio - Cria um novo diret√≥rio
   - remover_arquivo - Remove um arquivo
   - remover_diretorio - Remove um diret√≥rio
   - copiar_arquivo - Copia um arquivo
   - mover_arquivo - Move um arquivo

2. Leitura de Documentos:
   - ler_arquivo_txt - L√™ o conte√∫do de arquivos .txt
   - ler_arquivo_docx - L√™ o conte√∫do de arquivos .docx (Word)
   - ler_arquivo_pdf - L√™ o conte√∫do de arquivos .pdf
   - ler_arquivo_csv - L√™ o conte√∫do de arquivos .csv

3. Web e Internet:
   - pesquisar_web - Realiza pesquisas na web
   - obter_clima - Obt√©m informa√ß√µes sobre o clima
   - obter_noticias - Obt√©m as √∫ltimas not√≠cias
   - obter_cotacao - Obt√©m cota√ß√µes de moedas

4. Processamento de Texto:
   - traduzir_texto - Traduz texto entre idiomas
   - resumir_texto - Cria um resumo do texto
   - extrair_palavras_chave - Extrai palavras-chave do texto
   - analisar_sentimento - Analisa o sentimento em textos
   - gerar_resumo - Cria resumos autom√°ticos
   - classificar_texto - Categoriza conte√∫do
   - extrair_entidades - Identifica pessoas, lugares, datas
   - verificar_plagio - Verifica similaridade de textos

5. Manipula√ß√£o de Dados:
   - converter_formato - Converte entre formatos (JSON, CSV, XML)
   - validar_dados - Valida dados estruturados
   - filtrar_dados - Filtra e ordena conjuntos de dados
   - agregar_dados - Realiza agrega√ß√µes e estat√≠sticas
   - visualizar_dados - Cria visualiza√ß√µes b√°sicas

6. Seguran√ßa:
   - verificar_seguranca - Realiza an√°lise b√°sica de seguran√ßa
   - sanitizar_input - Limpa dados de entrada
   - validar_permissao - Verifica permiss√µes
   - criptografar_dados - Realiza criptografia b√°sica
   - verificar_vulnerabilidades - Checa vulnerabilidades

7. Otimiza√ß√£o:
   - otimizar_codigo - Sugere otimiza√ß√µes
   - analisar_performance - Analisa desempenho
   - reduzir_complexidade - Simplifica c√≥digo
   - melhorar_legibilidade - Melhora legibilidade
   - refatorar_codigo - Sugere refatora√ß√µes

8. Documenta√ß√£o:
   - gerar_documentacao - Cria documenta√ß√£o
   - extrair_comentarios - Analisa coment√°rios
   - validar_documentacao - Verifica documenta√ß√£o
   - atualizar_docs - Atualiza documenta√ß√£o
   - gerar_exemplos - Cria exemplos de uso

9. Integra√ß√£o:
   - verificar_api - Testa APIs
   - validar_webhook - Verifica webhooks
   - testar_conexao - Testa conectividade
   - monitorar_servico - Monitora servi√ßos
   - sincronizar_dados - Sincroniza dados

10. Desenvolvimento:
    - gerar_teste - Cria testes unit√°rios
    - validar_codigo - Valida c√≥digo
    - verificar_padrao - Verifica padr√µes
    - sugerir_melhorias - Sugere melhorias
    - analisar_dependencias - Analisa depend√™ncias

11. Suporte:
    - gerar_log - Gera logs estruturados
    - analisar_erro - Analisa erros
    - sugerir_solucao - Sugere solu√ß√µes
    - verificar_compatibilidade - Verifica compatibilidade
    - gerar_relatorio - Gera relat√≥rios

Para usar uma ferramenta, use o formato:
Action: nome_da_ferramenta
Action Input: {"parametro1": "valor1", "parametro2": "valor2"}

IMPORTANTE: 
1. Use barras normais (/) nos caminhos, n√£o use barras invertidas (\\)
2. Sempre verifique se os par√¢metros est√£o corretos
3. Trate erros adequadamente
4. Confirme a execu√ß√£o das a√ß√µes
5. Mantenha o usu√°rio informado
"""

class ModeloType(Enum):
    GERAL = "geral"
    CODER = "coder"

@dataclass
class ModeloConfig:
    nome: str
    descricao: str
    system_message: str
    modelos: List[str]
    max_tokens: int = 2000
    temperature: float = 0.3
    timeout: int = 300  # 5 minutos padr√£o

# Configura√ß√£o dos modelos
MODELOS_CONFIG = {
    ModeloType.GERAL: ModeloConfig(
        nome="Modelos Gerais",
        descricao="Modelos para uso geral, conversas e tarefas b√°sicas",
        system_message="""
        Voc√™ √© um assistente virtual inteligente e vers√°til.
        Voc√™ pode ajudar com v√°rias tarefas e manter conversas naturais.
        
        Capacidades Principais:
        1. Conversa√ß√£o Natural
           - Manter di√°logos fluidos e contextuais
           - Adaptar o tom ao contexto
           - Usar linguagem apropriada
           - Demonstrar empatia
           - Manter coer√™ncia
        
        2. Processamento de Texto
           - Resumir textos
           - Extrair informa√ß√µes
           - Analisar sentimentos
           - Identificar t√≥picos
           - Gerar conte√∫do
        
        3. An√°lise de Dados
           - Interpretar dados
           - Identificar padr√µes
           - Fazer infer√™ncias
           - Sugerir insights
           - Validar informa√ß√µes
        
        4. Resolu√ß√£o de Problemas
           - Analisar situa√ß√µes
           - Propor solu√ß√µes
           - Avaliar alternativas
           - Considerar consequ√™ncias
           - Recomendar a√ß√µes
        
        5. Aprendizado Cont√≠nuo
           - Adaptar a novos contextos
           - Incorporar feedback
           - Melhorar respostas
           - Atualizar conhecimentos
           - Refinar abordagens
        """,
        modelos=["qwen3:1.7b", "qwen3:0.6b", "qwen3:4b"],
        max_tokens=4000,
        temperature=0.5,
        timeout=180  # 3 minutos para modelos gerais
    ),
    ModeloType.CODER: ModeloConfig(
        nome="Modelos de Programa√ß√£o",
        descricao="Modelos especializados em programa√ß√£o e desenvolvimento",
        system_message="""
        Voc√™ √© um assistente virtual especializado em programa√ß√£o.
        Voc√™ pode ajudar com desenvolvimento de software, debugging e boas pr√°ticas.
        
        Voc√™ tem acesso √† internet e pode:
        1. Buscar exemplos de c√≥digo em reposit√≥rios como GitHub
        2. Consultar documenta√ß√£o oficial
        3. Pesquisar solu√ß√µes em Stack Overflow
        4. Verificar padr√µes de projeto em sites especializados
        5. Buscar boas pr√°ticas e tutoriais
        6. Consultar benchmarks de performance
        7. Verificar vulnerabilidades conhecidas
        8. Pesquisar bibliotecas e frameworks
        9. Consultar guias de estilo
        10. Buscar casos de uso similares
        11. Pesquisar em reposit√≥rios de c√≥digo
        12. Verificar exemplos de implementa√ß√£o
        13. Consultar f√≥runs de desenvolvimento
        14. Buscar artigos t√©cnicos
        15. Verificar documenta√ß√£o de APIs
        """,
        modelos=["qwen2.5-coder:3b"],
        max_tokens=8000,  # Aumentado para permitir c√≥digo mais complexo
        temperature=0.3,  # Reduzido para maior precis√£o
        timeout=300  # 5 minutos para modelos de programa√ß√£o
    )
}

def obter_modelos_disponiveis() -> List[str]:
    """
    Obt√©m a lista de modelos dispon√≠veis no Ollama.
    
    Returns:
        List[str]: Lista de modelos dispon√≠veis
    """
    try:
        # Primeiro tenta usar o comando ollama list
        try:
            resultado = subprocess.run(
                ["ollama", "list"],
                capture_output=True,
                text=True,
                check=True
            )
            
            # Processar sa√≠da
            linhas = resultado.stdout.strip().split("\n")
            modelos = []
            
            # Pular cabe√ßalho
            for linha in linhas[1:]:
                if linha.strip():
                    # Extrair nome do modelo
                    nome = linha.split()[0]
                    modelos.append(nome)
            
            if modelos:
                return modelos
                
        except Exception as e:
            logger.warning(f"Erro ao usar comando ollama list: {e}")
        
        # Se falhar, tenta a API
        try:
            response = requests.get("http://localhost:11434/api/tags")
            
            if response.status_code == 200:
                dados = response.json()
                if "models" in dados:
                    return [modelo["name"] for modelo in dados["models"]]
                    
        except Exception as e:
            logger.warning(f"Erro ao usar API do Ollama: {e}")
        
        # Se ambos falharem, retorna lista padr√£o
        logger.warning("Usando lista padr√£o de modelos")
        return [
            "qwen3:1.7b",
            "qwen3:0.6b",
            "qwen3:4b",
            "qwen2.5-coder:3b"
        ]
            
    except Exception as e:
        logger.error(f"Erro ao obter modelos: {e}")
        return ["qwen3:1.7b"]  # Modelo padr√£o em caso de erro

def listar_modelos_ollama() -> List[Dict[str, Any]]:
    """
    Lista os modelos dispon√≠veis no Ollama com informa√ß√µes detalhadas.
    
    Returns:
        List[Dict[str, Any]]: Lista de modelos com informa√ß√µes
    """
    try:
        # Executar comando
        resultado = subprocess.run(
            ["ollama", "list"],
            capture_output=True,
            text=True,
            check=True
        )
        
        # Processar sa√≠da
        linhas = resultado.stdout.strip().split("\n")
        modelos = []
        
        # Pular cabe√ßalho
        for linha in linhas[1:]:
            if linha.strip():
                partes = linha.split()
                if len(partes) >= 3:
                    nome = partes[0]
                    tamanho = partes[1]
                    modificado = " ".join(partes[2:])
                    modelos.append({
                        "nome": nome,
                        "tamanho": tamanho,
                        "modificado": modificado
                    })
        
        return modelos
        
    except Exception as e:
        logger.error(f"Erro ao listar modelos: {e}")
        return []

def verificar_modelo_disponivel(modelo: str) -> bool:
    """
    Verifica se um modelo est√° dispon√≠vel.
    
    Args:
        modelo: Nome do modelo
    
    Returns:
        bool: True se o modelo estiver dispon√≠vel, False caso contr√°rio
    """
    try:
        # Listar modelos
        modelos = obter_modelos_disponiveis()
        
        # Verificar se o modelo est√° na lista
        return modelo in modelos
        
    except Exception as e:
        logger.error(f"Erro ao verificar modelo: {e}")
        return False

# Fun√ß√µes de callback para a barra de progresso
def _progress_start(message: str):
    st.session_state.is_processing_message = True
    st.session_state.show_progress_bar = True
    st.session_state.current_progress_text = message
    st.session_state.current_progress_value = 5 # Inicia com um pequeno valor para mostrar atividade
    logger.debug(f"Progress start: {message}")

    # Directly update placeholders if they exist
    if hasattr(st.session_state, 'progress_text_placeholder') and st.session_state.progress_text_placeholder is not None:
        st.session_state.progress_text_placeholder.text(f"Status: {message}")
    if hasattr(st.session_state, 'progress_bar_placeholder') and st.session_state.progress_bar_placeholder is not None and st.session_state.show_progress_bar:
        st.session_state.progress_bar_placeholder.progress(max(0, min(100, 5)))

def _progress_update(value: int, message: str):
    st.session_state.show_progress_bar = True
    st.session_state.current_progress_text = message
    st.session_state.current_progress_value = int(value)  # Ensure value is int
    logger.debug(f"Progress update: {message} - {value}%")

    # Directly update placeholders if they exist
    if hasattr(st.session_state, 'progress_text_placeholder') and st.session_state.progress_text_placeholder is not None:
        st.session_state.progress_text_placeholder.text(f"Status: {message}")
    if hasattr(st.session_state, 'progress_bar_placeholder') and st.session_state.progress_bar_placeholder is not None and st.session_state.show_progress_bar:
        # Ensure value is clamped between 0 and 100 for st.progress
        clamped_value = max(0, min(100, int(value)))
        st.session_state.progress_bar_placeholder.progress(clamped_value)

def _progress_end():
    st.session_state.is_processing_message = False
    st.session_state.show_progress_bar = False
    st.session_state.current_progress_text = ""
    st.session_state.current_progress_value = 0
    logger.debug("Progress end")

    # Directly clear/update placeholders
    if hasattr(st.session_state, 'progress_text_placeholder') and st.session_state.progress_text_placeholder is not None:
        st.session_state.progress_text_placeholder.empty()
    if hasattr(st.session_state, 'progress_bar_placeholder') and st.session_state.progress_bar_placeholder is not None:
        st.session_state.progress_bar_placeholder.empty()

# ---- AGENT INITIALIZATION ----
logger.debug(f"SESSION_STATE_DEBUG: Pre-check for 'agente_ia'. Session keys: {list(st.session_state.keys())}")
if "agente_ia" not in st.session_state:
    logger.info("SESSION_STATE_DEBUG: 'agente_ia' NOT in session_state. Initializing AgenteIA...")
    st.session_state.agente_ia = AgenteIA(
        on_progress_start=_progress_start,
        on_progress_update=_progress_update,
        on_progress_end=_progress_end
    )
    logger.info(f"SESSION_STATE_DEBUG: AgenteIA initialized and set in session_state. Type: {type(st.session_state.agente_ia)}.")
else:
    logger.info("SESSION_STATE_DEBUG: 'agente_ia' IS ALREADY in session_state. Re-assigning callbacks.")
    # Re-assign callbacks to the existing agent instance
    if hasattr(st.session_state.agente_ia, 'on_progress_start'): # Check if agent has these attributes before assigning
        st.session_state.agente_ia.on_progress_start = _progress_start
    if hasattr(st.session_state.agente_ia, 'on_progress_update'):
        st.session_state.agente_ia.on_progress_update = _progress_update
    st.session_state.agente_ia.on_progress_end = _progress_end



agente_ia = st.session_state.agente_ia # Ensure agente_ia variable is sourced from session_state

if "modelo" not in st.session_state:
    st.session_state.modelo = "qwen3:1.7b"  # Modelo padr√£o

if "ferramentas" not in st.session_state:
    st.session_state.ferramentas = ["listar_arquivos", "escrever_arquivo", "criar_diretorio"]

if "verboso" not in st.session_state:
    st.session_state.verboso = False

if "show_progress_bar" not in st.session_state:
    st.session_state.show_progress_bar = False

if "current_progress_value" not in st.session_state:
    st.session_state.current_progress_value = 0

if "current_progress_text" not in st.session_state:
    st.session_state.current_progress_text = ""

if "modelos_disponiveis" not in st.session_state:
    st.session_state.modelos_disponiveis = obter_modelos_disponiveis()

if "ferramentas_disponiveis" not in st.session_state:
    st.session_state.ferramentas_disponiveis = [
        # Manipula√ß√£o de Arquivos
        "listar_arquivos",
        "escrever_arquivo",
        "criar_diretorio",
        "remover_arquivo",
        "remover_diretorio",
        "copiar_arquivo",
        "mover_arquivo",
        
        # Leitura de Documentos
        "ler_arquivo_txt",
        "ler_arquivo_docx",
        "ler_arquivo_pdf",
        "ler_arquivo_csv",
        
        # Web e Internet
        "pesquisar_web",
        "obter_clima",
        "obter_noticias",
        "obter_cotacao",
        
        # Processamento de Texto
        "traduzir_texto",
        "resumir_texto",
        "extrair_palavras_chave",
        
        # An√°lise e Processamento
        "analisar_sentimento",
        "gerar_resumo",
        "classificar_texto",
        "extrair_entidades",
        "verificar_plagio",
        
        # Manipula√ß√£o de Dados
        "converter_formato",
        "validar_dados",
        "filtrar_dados",
        "agregar_dados",
        "visualizar_dados",
        
        # Seguran√ßa
        "verificar_seguranca",
        "sanitizar_input",
        "validar_permissao",
        "criptografar_dados",
        "verificar_vulnerabilidades",
        
        # Otimiza√ß√£o
        "otimizar_codigo",
        "analisar_performance",
        "reduzir_complexidade",
        "melhorar_legibilidade",
        "refatorar_codigo",
        
        # Documenta√ß√£o
        "gerar_documentacao",
        "extrair_comentarios",
        "validar_documentacao",
        "atualizar_docs",
        "gerar_exemplos",
        
        # Integra√ß√£o
        "verificar_api",
        "validar_webhook",
        "testar_conexao",
        "monitorar_servico",
        "sincronizar_dados",
        
        # Desenvolvimento
        "gerar_teste",
        "validar_codigo",
        "verificar_padrao",
        "sugerir_melhorias",
        "analisar_dependencias",
        
        # Suporte
        "gerar_log",
        "analisar_erro",
        "sugerir_solucao",
        "verificar_compatibilidade",
        "gerar_relatorio"
    ]

# Estilo CSS
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stTextInput > div > div > input {
        font-size: 1.2rem;
    }
    .stButton > button {
        width: 100%;
        font-size: 1.2rem;
        padding: 0.5rem 1rem;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: row;
        align-items: flex-start;
    }
    .chat-message.user {
        background-color: #2b313e;
    }
    .chat-message.assistant {
        background-color: #475063;
    }
    .chat-message .avatar {
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        margin-right: 1rem;
    }
    .chat-message .message {
        flex: 1;
    }
    </style>
""", unsafe_allow_html=True)

def inicializar_agente(modelo: str = None, ferramentas: list = None, verboso: bool = None) -> None:
    """
    Inicializa o agente.
    
    Args:
        modelo: Nome do modelo
        ferramentas: Lista de ferramentas
        verboso: Modo verboso
    """
    try:
        # Verificar modelo
        if modelo:
            if modelo not in st.session_state.modelos_disponiveis:
                st.error(f"Modelo n√£o encontrado: {modelo}")
                return
            st.session_state.modelo = modelo
        
        # Verificar ferramentas
        if ferramentas:
            for ferramenta in ferramentas:
                if ferramenta not in st.session_state.ferramentas_disponiveis:
                    st.error(f"Ferramenta n√£o encontrada: {ferramenta}")
                    return
            st.session_state.ferramentas = ferramentas
        
        # Verificar modo verboso
        if verboso is not None:
            st.session_state.verboso = verboso
        
        # Verificar se o modelo est√° dispon√≠vel
        if not verificar_modelo_disponivel(st.session_state.modelo):
            st.error(f"Modelo n√£o dispon√≠vel: {st.session_state.modelo}")
            return
        
        # Verificar se as ferramentas est√£o dispon√≠veis
        for ferramenta in st.session_state.ferramentas:
            if not verificar_ferramenta_disponivel(ferramenta):
                st.error(f"Ferramenta n√£o dispon√≠vel: {ferramenta}")
                return
        
        # Inicializar agente
        st.success("Agente inicializado com sucesso")
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Agente inicializado com o modelo {st.session_state.modelo} e as ferramentas {', '.join(st.session_state.ferramentas)}"
        })
        
    except Exception as e:
        st.error(f"Erro ao inicializar agente: {e}")

def verificar_ferramenta_disponivel(ferramenta: str) -> bool:
    """
    Verifica se uma ferramenta est√° dispon√≠vel.
    
    Args:
        ferramenta: Nome da ferramenta
    
    Returns:
        True se a ferramenta estiver dispon√≠vel, False caso contr√°rio
    """
    try:
        # TODO: Implementar verifica√ß√£o da ferramenta
        return True
        
    except Exception as e:
        st.error(f"Erro ao verificar ferramenta: {e}")
        return False

def inicializar_historico() -> None:
    """
    Inicializa o hist√≥rico de mensagens.
    """
    try:
        # Verificar se o hist√≥rico j√° existe
        if "historico" in st.session_state:
            return
        
        # Inicializar hist√≥rico
        st.session_state.historico = []
        
        # Adicionar mensagem inicial
        st.session_state.historico.append({
            "role": "system",
            "content": "Bem-vindo ao AgenteIA! Estou aqui para ajudar com qualquer coisa que voc√™ precise.",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        logger.error(f"Erro ao inicializar hist√≥rico: {e}")

def limpar_historico() -> None:
    """
    Limpa o hist√≥rico de mensagens.
    """
    try:
        # Verificar se o hist√≥rico existe
        if "historico" not in st.session_state:
            st.warning("Hist√≥rico n√£o inicializado")
            return
        
        # Limpar hist√≥rico
        st.session_state.historico = []
        
        # Adicionar mensagem de confirma√ß√£o
        st.session_state.historico.append({
            "role": "system",
            "content": "Hist√≥rico limpo",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
        # Exibir mensagem de sucesso
        st.success("Hist√≥rico limpo com sucesso")
        
    except Exception as e:
        st.error(f"Erro ao limpar hist√≥rico: {e}")

def salvar_historico(caminho: str) -> None:
    """
    Salva o hist√≥rico de mensagens em um arquivo.
    
    Args:
        caminho: Caminho do arquivo
    """
    try:
        # Verificar se o hist√≥rico existe
        if "historico" not in st.session_state:
            st.warning("Hist√≥rico n√£o inicializado")
            return
        
        # Salvar hist√≥rico
        with open(caminho, "w", encoding="utf-8") as f:
            json.dump(st.session_state.historico, f, indent=4, ensure_ascii=False)
        
        # Adicionar mensagem de confirma√ß√£o
        st.session_state.historico.append({
            "role": "system",
            "content": f"Hist√≥rico salvo em {caminho}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
        # Exibir mensagem de sucesso
        st.success(f"Hist√≥rico salvo em {caminho}")
        
    except Exception as e:
        st.error(f"Erro ao salvar hist√≥rico: {e}")

def carregar_historico(caminho: str) -> None:
    """
    Carrega o hist√≥rico de mensagens de um arquivo.
    
    Args:
        caminho: Caminho do arquivo
    """
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(caminho):
            st.error(f"Arquivo n√£o encontrado: {caminho}")
            return
        
        # Carregar hist√≥rico
        with open(caminho, "r", encoding="utf-8") as f:
            st.session_state.historico = json.load(f)
        
        # Adicionar mensagem de confirma√ß√£o
        st.session_state.historico.append({
            "role": "system",
            "content": f"Hist√≥rico carregado de {caminho}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
        # Exibir mensagem de sucesso
        st.success(f"Hist√≥rico carregado de {caminho}")
        
    except Exception as e:
        st.error(f"Erro ao carregar hist√≥rico: {e}")

def exibir_mensagem(role: str, content: str) -> None:
    """
    Exibe uma mensagem.
    
    Args:
        role: Papel da mensagem (user, assistant, system, error, success, info, warning)
        content: Conte√∫do da mensagem
    """
    try:
        # Verificar se o hist√≥rico existe
        if "historico" not in st.session_state:
            st.warning("Hist√≥rico n√£o inicializado")
            return
        
        # Adicionar mensagem ao hist√≥rico
        st.session_state.historico.append({
            "role": role,
            "content": content,
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
        # Exibir mensagem
        if role == "user":
            st.write(f"üë§ **Voc√™:** {content}")
        elif role == "assistant":
            st.write(f"ü§ñ **Assistente:** {content}")
        elif role == "system":
            st.write(f"‚öôÔ∏è **Sistema:** {content}")
        elif role == "error":
            st.error(content)
        elif role == "success":
            st.success(content)
        elif role == "info":
            st.info(content)
        elif role == "warning":
            st.warning(content)
        else:
            st.write(f"**{role}:** {content}")
        
    except Exception as e:
        st.error(f"Erro ao exibir mensagem: {e}")

def exibir_mensagem_erro(mensagem: str) -> None:
    """
    Exibe uma mensagem de erro.
    
    Args:
        mensagem: Mensagem de erro
    """
    try:
        exibir_mensagem("error", mensagem)
        
    except Exception as e:
        st.error(f"Erro ao exibir mensagem de erro: {e}")

def exibir_mensagem_sucesso(mensagem: str) -> None:
    """
    Exibe uma mensagem de sucesso.
    
    Args:
        mensagem: Mensagem de sucesso
    """
    try:
        exibir_mensagem("success", mensagem)
        
    except Exception as e:
        st.error(f"Erro ao exibir mensagem de sucesso: {e}")

def exibir_mensagem_info(mensagem: str) -> None:
    """
    Exibe uma mensagem informativa.
    
    Args:
        mensagem: Mensagem informativa
    """
    try:
        exibir_mensagem("info", mensagem)
        
    except Exception as e:
        st.error(f"Erro ao exibir mensagem informativa: {e}")

def exibir_mensagem_aviso(mensagem: str) -> None:
    """
    Exibe uma mensagem de aviso.
    
    Args:
        mensagem: Mensagem de aviso
    """
    try:
        exibir_mensagem("warning", mensagem)
        
    except Exception as e:
        st.error(f"Erro ao exibir mensagem de aviso: {e}")

def exibir_ajuda() -> None:
    """Exibe a ajuda da interface."""
    try:
        # T√≠tulo
        st.title("üìö Ajuda")
        
        # Introdu√ß√£o
        st.markdown("""
        Bem-vindo ao AgenteIA! Este √© um assistente virtual inteligente que pode ajudar voc√™ com diversas tarefas.
        
        ### Funcionalidades
        
        - **Chat**: Converse com o agente sobre qualquer assunto
        - **Programa√ß√£o**: Pe√ßa ajuda para criar c√≥digos e programas
        - **Arquivos**: Manipule arquivos e diret√≥rios
        - **Documentos**: Crie e edite documentos
        - **Web**: Pesquise informa√ß√µes na internet
        
        ### Como Usar
        
        1. Digite sua mensagem na caixa de texto
        2. Aguarde a resposta do agente
        3. Use os bot√µes da barra lateral para:
           - Selecionar o modelo
           - Atualizar a lista de modelos
           - Baixar o modelo coder
           - Limpar o hist√≥rico
        
        ### Dicas
        
        - Para tarefas de programa√ß√£o, use o modelo coder
        - Use caminhos completos do Windows (ex: C:\\Users\\Usuario\\Desktop)
        - Seja espec√≠fico em suas solicita√ß√µes
        - Em caso de erro, tente reformular sua pergunta
        
        ### Exemplos
        
        - "Crie um jogo snake em Python"
        - "Crie uma pasta chamada 'projetos' no desktop"
        - "Pesquise sobre intelig√™ncia artificial"
        - "Crie um documento Word com um relat√≥rio"
        
        ### Suporte
        
        Se precisar de ajuda, entre em contato com o suporte.
        """)
        
    except Exception as e:
        st.error(f"Erro ao exibir ajuda: {e}")

def exibir_sobre() -> None:
    """
    Exibe informa√ß√µes sobre a aplica√ß√£o.
    """
    try:
        st.title("Sobre")
        
        # Exibir informa√ß√µes
        st.write("""
        ## AgenteIA
        
        Um agente de IA inteligente que pode ajudar voc√™ com v√°rias tarefas.
        
        ### Funcionalidades
        
        - ü§ñ Processamento de linguagem natural
        - üìÅ Manipula√ß√£o de arquivos
        - üìÇ Gerenciamento de diret√≥rios
        - üìú Hist√≥rico de mensagens
        - ‚öôÔ∏è Configura√ß√µes personaliz√°veis
        - üõ†Ô∏è Ferramentas extens√≠veis
        
        ### Modelos Dispon√≠veis
        
        - **Geral**
            - qwen3:1.7b
            - qwen3:0.6b
            - qwen3:4b
        
        - **Coder**
            - qwen2.5-coder:3b
        
        ### Ferramentas Dispon√≠veis
        
        - **Arquivos**
            - Criar arquivo
            - Ler arquivo
            - Escrever arquivo
            - Copiar arquivo
            - Mover arquivo
            - Remover arquivo
        
        - **Diret√≥rios**
            - Criar diret√≥rio
            - Listar diret√≥rio
            - Remover diret√≥rio
        
        ### Vers√£o
        
        Vers√£o atual: 1.0.0
        
        ### Desenvolvedor
        
        Desenvolvido por Sr.Africano
        
        ### Licen√ßa
        
        Este projeto est√° licenciado sob a licen√ßa MIT.
        
        ### C√≥digo Fonte
        
        O c√≥digo fonte est√° dispon√≠vel em: [GitHub](https://github.com/Sr.Africano/agenteia)
        """)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": "Informa√ß√µes sobre a aplica√ß√£o exibidas"
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir informa√ß√µes sobre a aplica√ß√£o: {e}")

def exibir_configuracoes() -> None:
    """Exibe as configura√ß√µes do sistema."""
    st.title("‚öôÔ∏è Configura√ß√µes")
    
    # Abas para diferentes tipos de configura√ß√µes
    tab1, tab2, tab3 = st.tabs(["Modelos", "Ferramentas", "Avan√ßado"])
    
    with tab1:
        st.header("Configura√ß√µes de Modelos")
        
        # Sele√ß√£o de categoria de modelo
        categoria = st.selectbox(
            "Categoria do Modelo",
            options=list(ModeloType),
            format_func=lambda x: MODELOS_CONFIG[x].nome
        )
        
        # Exibir descri√ß√£o da categoria
        st.info(MODELOS_CONFIG[categoria].descricao)
        
        # Lista de modelos dispon√≠veis
        modelos_disponiveis = obter_modelos_disponiveis()
        modelos_categoria = [
            m for m in modelos_disponiveis 
            if m in MODELOS_CONFIG[categoria].modelos
        ]
        
        if not modelos_categoria:
            st.warning(f"Nenhum modelo da categoria {MODELOS_CONFIG[categoria].nome} encontrado.")
            if st.button("Baixar Modelos"):
                for modelo in MODELOS_CONFIG[categoria].modelos:
                    try:
                        subprocess.run(["ollama", "pull", modelo], check=True)
                        st.success(f"Modelo {modelo} baixado com sucesso!")
                    except Exception as e:
                        st.error(f"Erro ao baixar modelo {modelo}: {e}")
        else:
            # Sele√ß√£o do modelo
            modelo_selecionado = st.selectbox(
                "Modelo",
                options=modelos_categoria,
                index=0
            )
            
            # Configura√ß√µes espec√≠ficas do modelo
            st.subheader("Configura√ß√µes do Modelo")
            max_tokens = st.slider(
                "M√°ximo de Tokens",
                min_value=1000,
                max_value=8000,
                value=MODELOS_CONFIG[categoria].max_tokens,
                step=1000
            )
            
            temperature = st.slider(
                "Temperature",
                min_value=0.1,
                max_value=1.0,
                value=MODELOS_CONFIG[categoria].temperature,
                step=0.1
            )
            
            if st.button("Aplicar Configura√ß√µes"):
                st.session_state.modelo = modelo_selecionado
                st.session_state.system_message = MODELOS_CONFIG[categoria].system_message
                st.session_state.max_tokens = max_tokens
                st.session_state.temperature = temperature
                st.success("Configura√ß√µes aplicadas com sucesso!")
    
    with tab2:
        st.header("Configura√ß√µes de Ferramentas")
        ferramentas = st.multiselect(
            "Ferramentas Dispon√≠veis",
            options=st.session_state.ferramentas_disponiveis,
            default=st.session_state.ferramentas
        )
        
        if st.button("Aplicar Ferramentas"):
            st.session_state.ferramentas = ferramentas
            st.success("Ferramentas atualizadas com sucesso!")
    
    with tab3:
        st.header("Configura√ß√µes Avan√ßadas")
        verboso = st.checkbox("Modo Verboso", value=st.session_state.verboso)
        
        if st.button("Aplicar Configura√ß√µes Avan√ßadas"):
            st.session_state.verboso = verboso
            st.success("Configura√ß√µes avan√ßadas aplicadas com sucesso!")

def exibir_audio(texto, lang='pt'):
    """
    Gera e exibe √°udio da resposta usando gTTS.
    """
    try:
        tts = gTTS(text=texto, lang=lang)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as fp:
            tts.save(fp.name)
            st.audio(fp.name, format='audio/mp3')
    except Exception as e:
        st.error(f"Erro ao gerar √°udio: {e}")

def exibir_menu() -> None:
    """
    Exibe o menu principal da aplica√ß√£o com navega√ß√£o e interface aprimoradas.
    """
    try:
        # Configura√ß√£o da barra lateral
        st.sidebar.title("ü§ñ AgenteIA")
        
        # Menu principal
        menu = st.sidebar.selectbox(
            "Menu",
            ["Chat", "Tarefas", "Arquivos", "Configura√ß√µes", "Ajuda", "Sobre"],
            key="menu_principal"
        )
        
        # Se√ß√£o de gerenciamento na barra lateral
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üìä Gerenciamento")
        
        # Bot√£o para gerenciar tarefas
        if st.sidebar.button("üìã Gerenciar Tarefas", use_container_width=True, key="btn_tarefas"):
            st.switch_page("pages/tarefas.py")
        
        # Se√ß√£o de status na barra lateral
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üìä Status do Sistema")
        
        # Verificar status do Ollama
        try:
            response = requests.get("http://localhost:11434/api/tags", timeout=5)
            if response.status_code == 200:
                st.sidebar.success("‚úÖ Ollama est√° rodando")
            else:
                st.sidebar.error("‚ùå Ollama n√£o est√° respondendo")
        except requests.exceptions.RequestException:
            st.sidebar.error("‚ùå Ollama n√£o est√° rodando")
        
        # Exibir informa√ß√µes do sistema
        st.sidebar.markdown(f"**Vers√£o:** 1.0.0")
        st.sidebar.markdown(f"**Usu√°rio:** {os.getlogin()}")
        
        # Se√ß√£o de chat
        if menu == "Chat":
            st.title("üí¨ Chat com AgenteIA")
            
            # Inicializar hist√≥rico se n√£o existir
            inicializar_historico()
            
            # Inicializar estado de processamento se n√£o existir
            if 'is_processing' not in st.session_state:
                st.session_state.is_processing = False
            
            # Container para o chat
            chat_container = st.container()
            
            # Exibir hist√≥rico de mensagens
            with chat_container:
                for mensagem in st.session_state.historico:
                    if mensagem["role"] == "user":
                        with st.chat_message("user"):
                            st.markdown(mensagem["content"])
                    elif mensagem["role"] == "assistant":
                        with st.chat_message("assistant"):
                            st.markdown(mensagem["content"])
            
            # √Årea de entrada de mensagem
            with st.form("chat_form", clear_on_submit=True):
                col1, col2 = st.columns([6, 1])
                with col1:
                    prompt = st.text_input(
                        "Digite sua mensagem:",
                        key="user_input",
                        label_visibility="collapsed",
                        placeholder="Digite sua mensagem aqui..."
                    )
                with col2:
                    submit_button = st.form_submit_button("Enviar", use_container_width=True)
            
            # Processar mensagem quando o formul√°rio for enviado
            if submit_button and prompt:
                if st.session_state.get('is_processing', False):
                    st.warning("‚è≥ Aguarde, j√° estou processando uma mensagem...")
                    st.stop()
                
                try:
                    # Adicionar mensagem do usu√°rio ao hist√≥rico
                    st.session_state.historico.append({
                        "role": "user",
                        "content": prompt,
                        "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    })
                    
                    # Exibir a mensagem do usu√°rio imediatamente
                    with st.chat_message("user"):
                        st.markdown(prompt)
                    
                    # Exibir indicador de processamento
                    with st.chat_message("assistant"):
                        with st.spinner("üß† Processando sua solicita√ß√£o..."):
                            # Processar a mensagem
                            resposta = processar_mensagem(prompt)
                            
                            # Atualizar o hist√≥rico com a resposta
                            st.session_state.historico.append({
                                "role": "assistant",
                                "content": resposta,
                                "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            })
                            
                            # Exibir a resposta
                            st.markdown(resposta)
                    
                    # Rolar para baixo e for√ßar atualiza√ß√£o
                    scroll_down()
                    st.rerun()
                    
                except Exception as e:
                    logger.error(f"Erro ao processar mensagem: {str(e)}", exc_info=True)
                    st.error(f"‚ö†Ô∏è Ocorreu um erro ao processar sua mensagem: {str(e)}")
                    st.rerun()
            
            # Adicionar bot√µes de a√ß√£o r√°pida
            st.markdown("---")
            st.markdown("### üöÄ A√ß√µes R√°pidas")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üîÑ Limpar Chat", use_container_width=True):
                    st.session_state.historico = []
                    st.rerun()
            
            with col2:
                if st.button("üìã Copiar Hist√≥rico", use_container_width=True):
                    # Implementar l√≥gica para copiar hist√≥rico
                    st.toast("Hist√≥rico copiado para a √°rea de transfer√™ncia!")
            
            with col3:
                if st.button("üì• Exportar Chat", use_container_width=True):
                    # Implementar l√≥gica para exportar chat
                    st.toast("Chat exportado com sucesso!")
        
        # Outras se√ß√µes do menu
        elif menu == "Arquivos":
            st.title("üìÅ Gerenciador de Arquivos")
            
            # Criar colunas para o layout
            col1, col2 = st.columns([3, 1])
            
            with col1:
                # Seletor de diret√≥rio
                diretorio = st.text_input(
                    "Digite o caminho do diret√≥rio:", 
                    key="input_diretorio",
                    placeholder="Ex: C:\\Users\\SeuUsuario\\Documentos"
                )
                
                if st.button("üìÇ Listar Arquivos", use_container_width=True) and diretorio:
                    listar_arquivos_diretorio(diretorio)
            
            with col2:
                st.markdown("### üìå Atalhos")
                diretorio_projetos = str(Path.home() / "AgenteIA_Projetos")
                documentos = str(Path.home() / "Documents")
                imagens = str(Path.home() / "Pictures")
                downloads = str(Path.home() / "Downloads")
                
                # Usar uma chave √∫nica para cada bot√£o para evitar conflitos
                if st.button("üìÅ Diret√≥rio de Projetos", use_container_width=True, key="btn_projetos"):
                    if 'input_diretorio' not in st.session_state or st.session_state.input_diretorio != diretorio_projetos:
                        st.session_state.input_diretorio = diretorio_projetos
                        st.rerun()
                    listar_arquivos_diretorio(diretorio_projetos)
                
                st.markdown("### üìÇ Pastas Especiais")
                if st.button("üìù Documentos", use_container_width=True, key="btn_documentos"):
                    if 'input_diretorio' not in st.session_state or st.session_state.input_diretorio != documentos:
                        st.session_state.input_diretorio = documentos
                        st.rerun()
                    listar_arquivos_diretorio(documentos)
                
                if st.button("üñºÔ∏è Imagens", use_container_width=True, key="btn_imagens"):
                    if 'input_diretorio' not in st.session_state or st.session_state.input_diretorio != imagens:
                        st.session_state.input_diretorio = imagens
                        st.rerun()
                    listar_arquivos_diretorio(imagens)
                
                if st.button("üìä Downloads", use_container_width=True, key="btn_downloads"):
                    if 'input_diretorio' not in st.session_state or st.session_state.input_diretorio != downloads:
                        st.session_state.input_diretorio = downloads
                        st.rerun()
                    listar_arquivos_diretorio(downloads)
        
        # Adicionar outras se√ß√µes do menu aqui
        elif menu == "Tarefas":
            st.title("üìã Gerenciador de Tarefas")
            st.info("Esta funcionalidade foi movida para uma p√°gina separada. Use o bot√£o na barra lateral para acessar.")
            
        elif menu == "Configura√ß√µes":
            st.title("‚öôÔ∏è Configura√ß√µes")
            st.write("Ajustes e prefer√™ncias do sistema")
            
            # Adicionar mais op√ß√µes de configura√ß√£o aqui
            st.subheader("Configura√ß√µes Gerais")
            modo_escuro = st.toggle("Modo Escuro", value=False)
            notificacoes = st.toggle("Ativar Notifica√ß√µes", value=True)
            
            st.subheader("Prefer√™ncias de Exibi√ß√£o")
            tema = st.selectbox(
                "Tema da Interface",
                ["Claro", "Escuro", "Sistema"]
            )
            
            if st.button("Salvar Configura√ß√µes", type="primary"):
                st.success("Configura√ß√µes salvas com sucesso!")
            
        elif menu == "Ajuda":
            st.title("‚ùì Ajuda")
            
            tab1, tab2, tab3 = st.tabs(["üìö Documenta√ß√£o", "‚ùì FAQ", "üìû Suporte"])
            
            with tab1:
                st.header("Documenta√ß√£o")
                st.markdown("""
                ### Como usar o AgenteIA
                
                1. **Chat**: Converse com o assistente inteligente
                2. **Arquivos**: Gerencie arquivos e pastas
                3. **Tarefas**: Gerencie suas tarefas di√°rias
                4. **Configura√ß√µes**: Personalize sua experi√™ncia
                
                ### Atalhos √öteis
                - `Ctrl + N`: Nova conversa
                - `Ctrl + S`: Salvar conversa
                - `Esc`: Cancelar opera√ß√£o
                """)
            
            with tab2:
                st.header("Perguntas Frequentes")
                
                with st.expander("Como alterar o modelo de IA?"):
                    st.write("V√° para Configura√ß√µes > Modelo e selecione o modelo desejado.")
                
                with st.expander("Como exportar o hist√≥rico de conversas?"):
                    st.write("Use o bot√£o 'Exportar Chat' na parte inferior da tela de chat.")
                
                with st.expander("O que fazer se o assistente n√£o responder?"):
                    st.write("Tente os seguintes passos:")
                    st.write("1. Verifique sua conex√£o com a internet")
                    st.write("2. Recarregue a p√°gina")
                    st.write("3. Entre em contato com o suporte")
            
            with tab3:
                st.header("Suporte")
                st.write("Entre em contato com nossa equipe de suporte:")
                
                st.markdown("""
                - üìß Email: suporte@agenteia.com
                - üåê Site: [www.agenteia.com/suporte](https://www.agenteia.com/suporte)
                - üìû Telefone: (11) 1234-5678
                
                **Hor√°rio de Atendimento:**
                Segunda a Sexta, das 9h √†s 18h
                """)
                
        elif menu == "Sobre":
            st.title("‚ÑπÔ∏è Sobre o AgenteIA")
            
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.image("https://via.placeholder.com/200", width=200)
            
            with col2:
                st.markdown("""
                ### Vers√£o 1.0.0
                
                **AgenteIA** √© um assistente virtual inteligente projetado para ajudar
                em diversas tarefas do dia a dia, desde gerenciamento de arquivos at√©
                automa√ß√£o de tarefas complexas.
                
                ### Recursos Principais
                - Chat inteligente com IA avan√ßada
                - Gerenciamento de arquivos integrado
                - Automa√ß√£o de tarefas
                - Suporte a m√∫ltiplos modelos de linguagem
                
                ### Desenvolvido por
                [Sua Empresa](https://www.suaempresa.com)
                """)
                
                st.markdown("---")
                st.markdown("üîó [Termos de Uso](https://www.suaempresa.com/termos) | [Pol√≠tica de Privacidade](https://www.suaempresa.com/privacidade)")
        
    except Exception as e:
        logger.error(f"Erro ao exibir menu: {str(e)}", exc_info=True)
        st.error(f"‚ö†Ô∏è Ocorreu um erro ao carregar a interface: {str(e)}")

def exibir_progresso(mensagem: str, progresso: float = None) -> st.delta_generator.DeltaGenerator:
    """
    Exibe uma barra de progresso personalizada.
    
    Args:
        mensagem: Mensagem de progresso a ser exibida
        progresso: Valor do progresso (0-100)
        
    Returns:
        st.delta_generator.DeltaGenerator: Container Streamlit para atualiza√ß√µes futuras
    """
    # Criar container para a barra de progresso
    progress_container = st.empty()
    
    # Atualizar a barra de progresso se o valor for fornecido
    if progresso is not None:
        # Garantir que o progresso est√° entre 0 e 100
        progresso = max(0, min(100, progresso))
        
        # Criar barra de progresso personalizada com mensagem
        progress_bar = f"""
        <div style='margin: 10px 0;'>
            <div style='display: flex; justify-content: space-between; margin-bottom: 5px;'>
                <span>{mensagem}</span>
                <span>{int(progresso)}%</span>
            </div>
            <div style='width: 100%; background-color: #f0f2f6; border-radius: 4px; overflow: hidden;'>
                <div style='width: {progresso}%; height: 10px; background-color: #1f77b4; 
                             transition: width 0.3s ease-in-out;'></div>
            </div>
        </div>
        """
        progress_container.markdown(progress_bar, unsafe_allow_html=True)
    elif mensagem:
        # Apenas exibir a mensagem se n√£o houver valor de progresso
        progress_container.info(mensagem)
    
    # Retornar o container para atualiza√ß√µes futuras
    return progress_container

def exibir_spinner(mensagem: str) -> None:
    """
    Exibe um spinner de carregamento.
    
    Args:
        mensagem: Mensagem de carregamento
    """
    try:
        # Exibir spinner
        with st.spinner(mensagem):
            time.sleep(0.1)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Carregando: {mensagem}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir spinner: {e}")

def exibir_loading(mensagem: str) -> None:
    """
    Exibe um indicador de carregamento.
    
    Args:
        mensagem: Mensagem de carregamento
    """
    try:
        # Exibir loading
        st.write(f"‚è≥ {mensagem}")
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Carregando: {mensagem}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir loading: {e}")

def exibir_done(mensagem: str) -> None:
    """
    Exibe uma mensagem de conclus√£o.
    
    Args:
        mensagem: Mensagem de conclus√£o
    """
    try:
        # Exibir done
        st.write(f"‚úÖ {mensagem}")
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Conclu√≠do: {mensagem}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir done: {e}")

def exibir_codigo(codigo: str, linguagem: str = "python") -> None:
    """
    Exibe um c√≥digo.
    
    Args:
        codigo: C√≥digo a ser exibido
        linguagem: Linguagem do c√≥digo
    """
    try:
        # Exibir c√≥digo
        st.code(codigo, language=linguagem)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"C√≥digo ({linguagem}):\n```{linguagem}\n{codigo}\n```",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir c√≥digo: {e}")

def exibir_json(json_data: dict) -> None:
    """
    Exibe um objeto JSON.
    
    Args:
        json_data: Objeto JSON a ser exibido
    """
    try:
        # Exibir JSON
        st.json(json_data)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"JSON:\n```json\n{json.dumps(json_data, indent=4)}\n```",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir JSON: {e}")

def exibir_tabela(dados: pd.DataFrame) -> None:
    """
    Exibe uma tabela.
    
    Args:
        dados: Dados da tabela
    """
    try:
        # Exibir tabela
        st.dataframe(dados)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Tabela:\n{dados.to_string()}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir tabela: {e}")

def exibir_grafico(dados: pd.DataFrame, tipo: str = "linha", x: str = None, y: str = None) -> None:
    """
    Exibe um gr√°fico.
    
    Args:
        dados: Dados do gr√°fico
        tipo: Tipo do gr√°fico (linha, barra, pizza)
        x: Coluna do eixo x
        y: Coluna do eixo y
    """
    try:
        # Exibir gr√°fico
        if tipo == "linha":
            st.line_chart(dados)
        elif tipo == "barra":
            st.bar_chart(dados)
        elif tipo == "pizza":
            st.pie_chart(dados)
        else:
            st.error(f"Tipo de gr√°fico n√£o suportado: {tipo}")
            return
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Gr√°fico ({tipo}):\nEixo X: {x}\nEixo Y: {y}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir gr√°fico: {e}")

def exibir_arquivo(caminho: str) -> None:
    """
    Exibe o conte√∫do de um arquivo.
    
    Args:
        caminho: Caminho do arquivo
    """
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(caminho):
            st.error(f"Arquivo n√£o encontrado: {caminho}")
            return
        
        # Ler o arquivo
        with open(caminho, "r", encoding="utf-8") as f:
            conteudo = f.read()
        
        # Exibir o conte√∫do
        st.text_area("Conte√∫do do arquivo", conteudo, height=400)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Arquivo: {caminho}\n```\n{conteudo}\n```",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir arquivo: {e}")

def exibir_arquivo_binario(caminho: str) -> None:
    """
    Exibe um arquivo bin√°rio.
    
    Args:
        caminho: Caminho do arquivo
    """
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(caminho):
            st.error(f"Arquivo n√£o encontrado: {caminho}")
            return
        
        # Ler arquivo
        with open(caminho, "rb") as f:
            conteudo = f.read()
        
        # Exibir conte√∫do
        st.download_button(
            label="Baixar Arquivo",
            data=conteudo,
            file_name=os.path.basename(caminho),
            mime="application/octet-stream"
        )
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "assistant",
            "content": f"Arquivo bin√°rio {caminho} dispon√≠vel para download"
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir arquivo bin√°rio: {e}")

def exibir_arquivo_texto(caminho: str) -> None:
    """
    Exibe um arquivo de texto.
    
    Args:
        caminho: Caminho do arquivo
    """
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(caminho):
            st.error(f"Arquivo n√£o encontrado: {caminho}")
            return
        
        # Ler arquivo
        with open(caminho, "r", encoding="utf-8") as f:
            conteudo = f.read()
        
        # Exibir conte√∫do
        st.text_area(
            label="Conte√∫do do Arquivo",
            value=conteudo,
            height=400
        )
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "assistant",
            "content": f"Conte√∫do do arquivo de texto {caminho}:\n{conteudo}"
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir arquivo de texto: {e}")

def exibir_arquivo_imagem(caminho: str) -> None:
    """
    Exibe uma imagem.
    
    Args:
        caminho: Caminho da imagem
    """
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(caminho):
            st.error(f"Imagem n√£o encontrada: {caminho}")
            return
        
        # Exibir imagem
        st.image(caminho)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "assistant",
            "content": f"Imagem {caminho} exibida"
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir imagem: {e}")

def exibir_diretorio(caminho: str) -> None:
    """
    Exibe o conte√∫do de um diret√≥rio.
    
    Args:
        caminho: Caminho do diret√≥rio
    """
    try:
        # Verificar se o diret√≥rio existe
        if not os.path.exists(caminho):
            st.error(f"Diret√≥rio n√£o encontrado: {caminho}")
            return
        
        # Listar arquivos e diret√≥rios
        arquivos = []
        diretorios = []
        
        for item in os.listdir(caminho):
            item_path = os.path.join(caminho, item)
            if os.path.isfile(item_path):
                arquivos.append(item)
            else:
                diretorios.append(item)
        
        # Exibir diret√≥rios
        if diretorios:
            st.subheader("Diret√≥rios")
            for diretorio in sorted(diretorios):
                st.write(f"üìÅ {diretorio}")
        
        # Exibir arquivos
        if arquivos:
            st.subheader("Arquivos")
            for arquivo in sorted(arquivos):
                st.write(f"üìÑ {arquivo}")
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": f"Diret√≥rio: {caminho}\nDiret√≥rios: {', '.join(diretorios)}\nArquivos: {', '.join(arquivos)}",
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir diret√≥rio: {e}")

def exibir_diretorio_arvore(caminho: str) -> None:
    """
    Exibe a estrutura de diret√≥rios em formato de √°rvore.
    
    Args:
        caminho: Caminho do diret√≥rio raiz
    """
    try:
        # Verificar se o diret√≥rio existe
        if not os.path.exists(caminho):
            st.error(f"Diret√≥rio n√£o encontrado: {caminho}")
            return
        
        # Fun√ß√£o auxiliar para gerar √°rvore
        def gerar_arvore(dir_path, prefix=""):
            tree = []
            items = os.listdir(dir_path)
            items.sort(key=str.lower)
            
            for i, item in enumerate(items):
                item_path = os.path.join(dir_path, item)
                is_last = i == len(items) - 1
                
                if os.path.isfile(item_path):
                    tree.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}üìÑ {item}")
                else:
                    tree.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}üìÅ {item}")
                    if os.path.isdir(item_path):
                        tree.extend(gerar_arvore(item_path, prefix + ("    " if is_last else "‚îÇ   ")))
            
            return tree
        
        # Gerar e exibir √°rvore
        arvore = gerar_arvore(caminho)
        st.code("\n".join(arvore))
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "assistant",
            "content": f"Estrutura de diret√≥rios em {caminho}:\n```\n" + "\n".join(arvore) + "\n```"
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir estrutura de diret√≥rios: {e}")

def exibir_diretorio_tabela(caminho: str) -> None:
    """
    Exibe o conte√∫do de um diret√≥rio em formato de tabela.
    
    Args:
        caminho: Caminho do diret√≥rio
    """
    try:
        # Verificar se o diret√≥rio existe
        if not os.path.exists(caminho):
            st.error(f"Diret√≥rio n√£o encontrado: {caminho}")
            return
        
        # Listar arquivos e diret√≥rios
        items = []
        
        for item in os.listdir(caminho):
            item_path = os.path.join(caminho, item)
            items.append({
                "Nome": item,
                "Tipo": "Diret√≥rio" if os.path.isdir(item_path) else "Arquivo",
                "Tamanho": "-" if os.path.isdir(item_path) else f"{os.path.getsize(item_path)} bytes",
                "Modificado": datetime.fromtimestamp(os.path.getmtime(item_path)).strftime("%Y-%m-%d %H:%M:%S")
            })
        
        # Ordenar por nome
        items.sort(key=lambda x: x["Nome"].lower())
        
        # Exibir tabela
        st.dataframe(items)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "assistant",
            "content": f"Conte√∫do do diret√≥rio {caminho} em formato de tabela"
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir diret√≥rio em formato de tabela: {e}")

def exibir_historico() -> None:
    """
    Exibe o hist√≥rico de mensagens.
    """
    try:
        # Verificar se h√° hist√≥rico
        if not st.session_state.historico:
            st.info("Nenhuma mensagem no hist√≥rico")
            return
        
        # Exibir hist√≥rico
        for msg in st.session_state.historico:
            if msg["role"] == "user":
                st.write(f"üë§ **Voc√™:** {msg['content']}")
            elif msg["role"] == "assistant":
                st.write(f"ü§ñ **Assistente:** {msg['content']}")
            elif msg["role"] == "system":
                st.write(f"‚öôÔ∏è **Sistema:** {msg['content']}")
            elif msg["role"] == "error":
                st.error(msg["content"])
            elif msg["role"] == "success":
                st.success(msg["content"])
            elif msg["role"] == "info":
                st.info(msg["content"])
            elif msg["role"] == "warning":
                st.warning(msg["content"])
            else:
                st.write(f"**{msg['role']}:** {msg['content']}")
            
            st.markdown("---")
        
    except Exception as e:
        st.error(f"Erro ao exibir hist√≥rico: {e}")

def exibir_historico_filtrado(filtro: str) -> None:
    """
    Exibe o hist√≥rico de mensagens filtrado.
    
    Args:
        filtro: Filtro para as mensagens
    """
    try:
        # Verificar se h√° hist√≥rico
        if not st.session_state.historico:
            st.info("Nenhuma mensagem no hist√≥rico")
            return
        
        # Filtrar hist√≥rico
        historico_filtrado = [
            msg for msg in st.session_state.historico
            if filtro.lower() in msg["content"].lower()
        ]
        
        # Verificar se h√° mensagens filtradas
        if not historico_filtrado:
            st.info(f"Nenhuma mensagem encontrada com o filtro: {filtro}")
            return
        
        # Exibir hist√≥rico filtrado
        for msg in historico_filtrado:
            if msg["role"] == "user":
                st.write(f"üë§ **Voc√™:** {msg['content']}")
            elif msg["role"] == "assistant":
                st.write(f"ü§ñ **Assistente:** {msg['content']}")
            elif msg["role"] == "system":
                st.write(f"‚öôÔ∏è **Sistema:** {msg['content']}")
            elif msg["role"] == "error":
                st.error(msg["content"])
            elif msg["role"] == "success":
                st.success(msg["content"])
            elif msg["role"] == "info":
                st.info(msg["content"])
            elif msg["role"] == "warning":
                st.warning(msg["content"])
            else:
                st.write(f"**{msg['role']}:** {msg['content']}")
            
            st.markdown("---")
        
    except Exception as e:
        st.error(f"Erro ao exibir hist√≥rico filtrado: {e}")

def exibir_historico_por_tipo(tipo: str) -> None:
    """
    Exibe o hist√≥rico de mensagens por tipo.
    
    Args:
        tipo: Tipo de mensagem (user, assistant, system, error, success, info, warning)
    """
    try:
        # Verificar se h√° hist√≥rico
        if not st.session_state.historico:
            st.info("Nenhuma mensagem no hist√≥rico")
            return
        
        # Filtrar hist√≥rico por tipo
        historico_filtrado = [
            msg for msg in st.session_state.historico
            if msg["role"] == tipo
        ]
        
        # Verificar se h√° mensagens do tipo
        if not historico_filtrado:
            st.info(f"Nenhuma mensagem do tipo: {tipo}")
            return
        
        # Exibir hist√≥rico filtrado
        for msg in historico_filtrado:
            if tipo == "user":
                st.write(f"üë§ **Voc√™:** {msg['content']}")
            elif tipo == "assistant":
                st.write(f"ü§ñ **Assistente:** {msg['content']}")
            elif tipo == "system":
                st.write(f"‚öôÔ∏è **Sistema:** {msg['content']}")
            elif tipo == "error":
                st.error(msg["content"])
            elif tipo == "success":
                st.success(msg["content"])
            elif tipo == "info":
                st.info(msg["content"])
            elif tipo == "warning":
                st.warning(msg["content"])
            else:
                st.write(f"**{tipo}:** {msg['content']}")
            
            st.markdown("---")
        
    except Exception as e:
        st.error(f"Erro ao exibir hist√≥rico por tipo: {e}")

def exibir_historico_por_data(data: str) -> None:
    """
    Exibe o hist√≥rico de mensagens por data.
    
    Args:
        data: Data no formato YYYY-MM-DD
    """
    try:
        # Verificar se h√° hist√≥rico
        if not st.session_state.historico:
            st.info("Nenhuma mensagem no hist√≥rico")
            return
        
        # Filtrar hist√≥rico por data
        historico_filtrado = [
            msg for msg in st.session_state.historico
            if msg.get("data", "").startswith(data)
        ]
        
        # Verificar se h√° mensagens da data
        if not historico_filtrado:
            st.info(f"Nenhuma mensagem da data: {data}")
            return
        
        # Exibir hist√≥rico filtrado
        for msg in historico_filtrado:
            if msg["role"] == "user":
                st.write(f"üë§ **Voc√™:** {msg['content']}")
            elif msg["role"] == "assistant":
                st.write(f"ü§ñ **Assistente:** {msg['content']}")
            elif msg["role"] == "system":
                st.write(f"‚öôÔ∏è **Sistema:** {msg['content']}")
            elif msg["role"] == "error":
                st.error(msg["content"])
            elif msg["role"] == "success":
                st.success(msg["content"])
            elif msg["role"] == "info":
                st.info(msg["content"])
            elif msg["role"] == "warning":
                st.warning(msg["content"])
            else:
                st.write(f"**{msg['role']}:** {msg['content']}")
            
            st.markdown("---")
        
    except Exception as e:
        st.error(f"Erro ao exibir hist√≥rico por data: {e}")

def exibir_versao() -> None:
    """
    Exibe a vers√£o da aplica√ß√£o.
    """
    try:
        st.title("Vers√£o")
        
        # Exibir informa√ß√µes da vers√£o
        st.write("""
        ## AgenteIA
        
        ### Vers√£o Atual
        
        - **Vers√£o**: 1.0.0
        - **Data**: 2024-03-20
        - **Autor**: Sr.Africano
        
        ### Hist√≥rico de Vers√µes
        
        #### Vers√£o 1.0.0 (2024-03-20)
        
        - üéâ Lan√ßamento inicial
        - ü§ñ Suporte a modelos de linguagem
        - üìÅ Manipula√ß√£o de arquivos
        - üìÇ Gerenciamento de diret√≥rios
        - üìú Hist√≥rico de mensagens
        - ‚öôÔ∏è Configura√ß√µes personaliz√°veis
        - üõ†Ô∏è Ferramentas extens√≠veis
        
        ### Pr√≥ximas Vers√µes
        
        #### Vers√£o 1.1.0 (Em desenvolvimento)
        
        - üîÑ Atualiza√ß√£o dos modelos
        - üé® Interface aprimorada
        - üìä Estat√≠sticas de uso
        - üîç Busca avan√ßada
        - üì± Suporte a dispositivos m√≥veis
        
        #### Vers√£o 1.2.0 (Planejada)
        
        - üåê Suporte a m√∫ltiplos idiomas
        - üéØ Modos de opera√ß√£o
        - üìà Gr√°ficos e visualiza√ß√µes
        - üîê Autentica√ß√£o e autoriza√ß√£o
        - üì¶ Pacotes e extens√µes
        
        ### Tecnologias
        
        - **Python**: 3.10.0
        - **Streamlit**: 1.31.0
        - **Ollama**: 0.1.0
        - **LangChain**: 0.1.0
        
        ### Requisitos
        
        - Python 3.10 ou superior
        - 4GB de RAM
        - 1GB de espa√ßo em disco
        - Conex√£o com a internet
        
        ### Instala√ß√£o
        
        ```bash
        pip install agenteia
        ```
        
        ### Atualiza√ß√£o
        
        ```bash
        pip install --upgrade agenteia
        ```
        
        ### Desinstala√ß√£o
        
        ```bash
        pip uninstall agenteia
        ```
        """)
        
        # Adicionar ao hist√≥rico
        st.session_state.historico.append({
            "role": "system",
            "content": "Informa√ß√µes da vers√£o exibidas"
        })
        
    except Exception as e:
        st.error(f"Erro ao exibir informa√ß√µes da vers√£o: {e}")

def verificar_ollama() -> bool:
    """
    Verifica se o servi√ßo Ollama est√° dispon√≠vel.
    
    Returns:
        bool: True se o servi√ßo estiver dispon√≠vel, False caso contr√°rio
    """
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        return response.status_code == 200
    except:
        return False

def log_request(mensagem: str, modelo: str, status: str, detalhes: str = None) -> None:
    """
    Registra informa√ß√µes detalhadas sobre uma requisi√ß√£o.
    
    Args:
        mensagem: Mensagem original
        modelo: Modelo usado
        status: Status da requisi√ß√£o (inicio, sucesso, erro)
        detalhes: Detalhes adicionais
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = {
        "timestamp": timestamp,
        "mensagem": mensagem[:100] + "..." if len(mensagem) > 100 else mensagem,
        "modelo": modelo,
        "status": status,
        "detalhes": detalhes
    }
    logger.info(f"Requisi√ß√£o: {json.dumps(log_entry, ensure_ascii=False)}")

def processar_fila() -> None:
    """
    Processa a fila de requisi√ß√µes em uma thread separada.
    """
    while True:
        try:
            # Obter pr√≥xima requisi√ß√£o da fila
            request = request_queue.get()
            if request is None:
                break
                
            request_id, mensagem, modelo, callback = request
            
            # Verificar se a requisi√ß√£o ainda √© v√°lida
            if request_id not in request_status:
                request_queue.task_done()
                continue
            
            # Verificar se j√° existe uma requisi√ß√£o ativa para esta mensagem
            if mensagem in active_requests:
                logger.info(f"Requisi√ß√£o duplicada ignorada: {mensagem[:50]}...")
                request_queue.task_done()
                continue
                
            # Processar requisi√ß√£o
            with processing_lock:
                try:
                    # Marcar requisi√ß√£o como ativa
                    active_requests.add(mensagem)
                    
                    # Registrar in√≠cio da requisi√ß√£o
                    log_request(mensagem, modelo, "inicio")
                    
                    # Processar mensagem
                    resposta = processar_mensagem_modelo(mensagem, modelo)
                    
                    # Registrar sucesso
                    log_request(mensagem, modelo, "sucesso")
                    
                    # Executar callback se a requisi√ß√£o ainda existir
                    if request_id in request_status:
                        callback(resposta)
                        del request_status[request_id]
                        
                except Exception as e:
                    # Registrar erro
                    log_request(mensagem, modelo, "erro", str(e))
                    
                    # Executar callback com erro se a requisi√ß√£o ainda existir
                    if request_id in request_status:
                        callback(f"Erro ao processar mensagem: {e}")
                        del request_status[request_id]
                        
                finally:
                    # Remover requisi√ß√£o da lista de ativas
                    active_requests.discard(mensagem)
                    
            # Marcar tarefa como conclu√≠da
            request_queue.task_done()
            
        except Exception as e:
            logger.error(f"Erro ao processar fila: {e}")
            time.sleep(1)  # Esperar um pouco antes de tentar novamente

# Iniciar thread de processamento
queue_thread = threading.Thread(target=processar_fila, daemon=True)
queue_thread.start()

def verificar_status_modelo(modelo: str) -> dict:
    """
    Verifica o status do modelo no Ollama.
    
    Args:
        modelo: Nome do modelo
    
    Returns:
        dict: Status do modelo
    """
    try:
        # Primeiro tenta verificar via API de tags
        response = requests.get(
            "http://localhost:11434/api/tags",
            timeout=5
        )
        
        if response.status_code == 200:
            dados = response.json()
            if "models" in dados:
                for m in dados["models"]:
                    if m["name"] == modelo:
                        return {"status": "ok", "model": m}
        
        # Se n√£o encontrar, tenta via API de show
        response = requests.get(
            f"http://localhost:11434/api/show",
            json={"name": modelo},
            timeout=5
        )
        
        if response.status_code == 200:
            return {"status": "ok", "model": response.json()}
            
        return {"status": "error", "message": "Modelo n√£o encontrado"}
    except Exception as e:
        logger.error(f"Erro ao verificar status do modelo: {e}")
        return {"status": "error", "message": str(e)}

def verificar_modelo_ocupado(modelo: str) -> bool:
    """
    Verifica se o modelo est√° ocupado processando outra requisi√ß√£o.
    
    Args:
        modelo: Nome do modelo
    
    Returns:
        bool: True se o modelo estiver ocupado
    """
    try:
        response = requests.get(
            "http://localhost:11434/api/tags",
            timeout=5
        )
        
        if response.status_code == 200:
            dados = response.json()
            if "models" in dados:
                for m in dados["models"]:
                    if m["name"] == modelo:
                        return m.get("status", "") == "generating"
        return False
    except Exception as e:
        logger.error(f"Erro ao verificar se modelo est√° ocupado: {e}")
        return False

def aguardar_modelo_disponivel(modelo: str, timeout: int = 300) -> bool:
    """
    Aguarda at√© que o modelo esteja dispon√≠vel.
    
    Args:
        modelo: Nome do modelo
        timeout: Tempo m√°ximo de espera em segundos
    
    Returns:
        bool: True se o modelo ficou dispon√≠vel
    """
    start_time = time.time()
    while time.time() - start_time < timeout:
        if not verificar_modelo_ocupado(modelo):
            return True
        time.sleep(1)
    return False

def obter_clima(cidade: str, pais: str) -> str:
    """
    Obt√©m informa√ß√µes sobre o clima de uma cidade.
    
    Args:
        cidade: Nome da cidade
        pais: Nome do pa√≠s
    
    Returns:
        str: Informa√ß√µes sobre o clima
    """
    try:
        # Usar a API OpenWeatherMap
        api_key = "80ede01e72d10ce73fa940c4dcfb929dc"  # Substitua pela sua chave API
        url = f"http://api.openweathermap.org/data/2.5/weather?q={cidade},{pais}&appid={api_key}&units=metric&lang=pt_br"
        
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            dados = response.json()
            
            # Extrair informa√ß√µes relevantes
            temperatura = dados["main"]["temp"]
            descricao = dados["weather"][0]["description"]
            umidade = dados["main"]["humidity"]
            vento = dados["wind"]["speed"]
            
            return f"""
            üå°Ô∏è Clima em {cidade}, {pais}:
            
            Temperatura: {temperatura}¬∞C
            Condi√ß√£o: {descricao}
            Umidade: {umidade}%
            Velocidade do vento: {vento} m/s
            """
        else:
            return f"Erro ao obter informa√ß√µes do clima: {response.status_code}"
    except Exception as e:
        logger.error(f"Erro ao obter clima: {e}")
        return f"Erro ao obter informa√ß√µes do clima: {e}"

def sanitizar_json(input_str: str) -> str:
    """
    Sanitiza uma string JSON para garantir que seja v√°lida.
    
    Args:
        input_str: String JSON a ser sanitizada
    
    Returns:
        str: String JSON sanitizada
    """
    try:
        # Primeira tentativa: parse direto
        json.loads(input_str)
        return input_str
    except json.JSONDecodeError:
        # Segunda tentativa: substitui√ß√µes b√°sicas
        sanitized = input_str
        sanitized = sanitized.replace("'", '"')  # Aspas simples para duplas
        sanitized = sanitized.replace("\n", "\\n")  # Quebras de linha
        sanitized = sanitized.replace("\r", "\\r")  # Retornos
        sanitized = sanitized.replace("\t", "\\t")  # Tabs
        sanitized = sanitized.replace("/n", "\\n")  # Quebras de linha no formato /n
        sanitized = sanitized.replace("/r", "\\r")  # Retornos no formato /r
        sanitized = sanitized.replace("/t", "\\t")  # Tabs no formato /t
        
        # Escapar aspas dentro de strings
        sanitized = re.sub(r'(?<!\\)"([^"]*?)(?<!\\)"', r'"\1"', sanitized)
        
        # Remover caracteres de controle
        sanitized = ''.join(char for char in sanitized if ord(char) >= 32 or char in '\n\r\t')
        
        try:
            # Tentar parse novamente
            json.loads(sanitized)
            return sanitized
        except json.JSONDecodeError:
            # Terceira tentativa: reconstruir o JSON
            try:
                # Extrair caminho e conte√∫do
                caminho_match = re.search(r'"caminho"\s*:\s*"([^"]+)"', sanitized)
                conteudo_match = re.search(r'"conteudo"\s*:\s*"([^"]+)"', sanitized)
                
                if caminho_match and conteudo_match:
                    caminho = caminho_match.group(1)
                    conteudo = conteudo_match.group(1)
                    
                    # Reconstruir JSON
                    return json.dumps({
                        "caminho": caminho,
                        "conteudo": conteudo
                    })
            except Exception:
                pass
            
            # Se todas as tentativas falharem, retornar None
            return None

# def processar_mensagem_modelo(mensagem: str, modelo: str) -> str:
#     """
#     Processa uma mensagem com um modelo espec√≠fico.
#     
#     Args:
#         mensagem: Mensagem do usu√°rio
#         modelo: Nome do modelo
#     
#     Returns:
#         Resposta do modelo
#     """
#     # Configura√ß√µes de retry
#     max_retries = 3
#     retry_delay = 5  # Aumentado para 5 segundos
#     request_timeout = 180  # Ser√° sobrescrito pelo timeout do modelo
#     
#     try:
#         # Verificar se o Ollama est√° dispon√≠vel
#         if not verificar_ollama():
#             log_request(mensagem, modelo, "erro", "Ollama n√£o dispon√≠vel")
#             return "Erro: O servi√ßo Ollama n√£o est√° dispon√≠vel. Por favor, verifique se o Ollama est√° rodando e tente novamente."
#         
#         # Verificar status do modelo
#         status = verificar_status_modelo(modelo)
#         if status["status"] == "error":
#             logger.warning(f"Modelo {modelo} n√£o encontrado, tentando continuar mesmo assim")
#         
#         # Determinar categoria e configura√ß√£o do modelo
#         categoria = None
#         for cat, config in MODELOS_CONFIG.items():
#             if modelo in config.modelos:
#                 categoria = cat
#                 request_timeout = config.timeout
#                 break
#         
#         if categoria is None:
#             logger.warning(f"Modelo {modelo} n√£o encontrado nas configura√ß√µes, usando timeout padr√£o")
#         
#         # Verificar se √© uma solicita√ß√£o de cria√ß√£o de c√≥digo
#         is_programming = any(keyword in mensagem.lower() for keyword in ["criar", "desenvolver", "fazer", "implementar", "c√≥digo", "programa", "site", "aplica√ß√£o"])
#         
#         if is_programming:
#             # Usar o modelo coder
#             modelo = "qwen2.5-coder:3b"
#             request_timeout = MODELOS_CONFIG[ModeloType.CODER].timeout
#             
#             # Criar diret√≥rio do projeto usando Path para lidar corretamente com caminhos
#             diretorio_projeto = Path.home() / "AgenteIA_Projetos" / f"projeto_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
#             diretorio_projeto = str(diretorio_projeto).replace("\\\\", "/")
#             os.makedirs(diretorio_projeto, exist_ok=True)
#             
#             # Preparar mensagem para o Ollama com instru√ß√µes mais claras sobre JSON
#             prompt = f"""
#             {system_message}
#             
#             Usu√°rio: {mensagem}
#             
#             Por favor, crie um projeto completo em {diretorio_projeto} com todos os arquivos necess√°rios.
#             Voc√™ DEVE usar o formato de a√ß√µes para criar os arquivos e diret√≥rios.
#             N√ÉO apenas descreva o c√≥digo, CRIE os arquivos usando as a√ß√µes.
#             
#             IMPORTANTE: 
#             1. Use barras normais (/) nos caminhos, n√£o use barras invertidas (\\\\)
#             2. O JSON deve ser v√°lido e bem formatado
#             3. Escape caracteres especiais no conte√∫do dos arquivos
#             4. Use aspas duplas para strings no JSON
#             5. N√£o use quebras de linha no JSON
#             6. Use \\\\n para quebras de linha no conte√∫do
#             7. Escape todas as aspas dentro do conte√∫do com \\\\\\\
#             """
#         else:
#             prompt = f"{system_message}\\n\\nUsu√°rio: {mensagem}"
#         
#         logger.info(f"Usando timeout de {request_timeout} segundos para o modelo {modelo}")
#         
#         # Chamar o Ollama com retry
#         last_error = None
#         for attempt in range(max_retries):
#             try:
#                 start_time = datetime.now()
#                 response = requests.post(
#                     "http://localhost:11434/api/generate",
#                     json={
#                         "model": modelo,
#                         "prompt": prompt,
#                         "stream": False
#                     },
#                     timeout=request_timeout
#                 )
#                 end_time = datetime.now()
#                 duration = (end_time - start_time).total_seconds()
#                 
#                 logger.info(f"Requisi√ß√£o conclu√≠da em {duration:.2f} segundos")
#                 
#                 if response.status_code == 200:
#                     resposta = response.json()["response"]
#                     logger.info(f"Resposta do modelo: {resposta[:200]}...")
#                     
#                     # Se for uma solicita√ß√£o de c√≥digo, processar a√ß√µes
#                     if is_programming:
#                         # Processar a√ß√µes na resposta
#                         linhas = resposta.split("\\n")
#                         arquivos_criados = []
#                         diretorios_criados = []
#                         
#                         for i, linha in enumerate(linhas):
#                             if linha.startswith("Action:"):
#                                 acao = linha.split("Action:")[1].strip()
#                                 if i + 1 < len(linhas) and linhas[i + 1].startswith("Action Input:"):
#                                     try:
#                                         # Extrair e limpar o JSON
#                                         input_str = linhas[i + 1].split("Action Input:")[1].strip()
#                                         input_str = input_str.replace("\\\\", "/")
#                                         
#                                         # Sanitizar JSON
#                                         sanitized_json_str = sanitizar_json(input_str) # Renamed to avoid conflict
#                                         if sanitized_json_str is None:
#                                             logger.error(f"N√£o foi poss√≠vel sanitizar o JSON: {input_str}")
#                                             continue
#                                             
#                                         parametros = json.loads(sanitized_json_str)
#                                         
#                                         # Validar par√¢metros obrigat√≥rios
#                                         if acao == "criar_diretorio":
#                                             if "caminho" not in parametros:
#                                                 logger.error("Par√¢metro 'caminho' n√£o encontrado para criar_diretorio")
#                                                 continue
#                                             
#                                             os.makedirs(parametros["caminho"], exist_ok=True)
#                                             diretorios_criados.append(parametros["caminho"])
#                                             logger.info(f"Diret√≥rio criado: {parametros['caminho']}")
#                                             
#                                         elif acao == "escrever_arquivo":
#                                             if "caminho" not in parametros or "conteudo" not in parametros:
#                                                 logger.error("Par√¢metros 'caminho' ou 'conteudo' n√£o encontrados para escrever_arquivo")
#                                                 continue
#                                             
#                                             # Criar diret√≥rio pai se n√£o existir
#                                             os.makedirs(os.path.dirname(parametros["caminho"]), exist_ok=True)
#                                             
#                                             # Escrever arquivo
#                                             with open(parametros["caminho"], "w", encoding="utf-8") as f:
#                                                 f.write(parametros["conteudo"])
#                                             arquivos_criados.append(parametros["caminho"])
#                                             logger.info(f"Arquivo criado: {parametros['caminho']}")
#                                             
#                                     except Exception as e:
#                                         logger.error(f"Erro ao executar a√ß√£o {acao}: {str(e)}")
#                                         continue
#                         
#                         # Adicionar informa√ß√µes do projeto
#                         resposta = f"""
#                         Projeto criado com sucesso em: {diretorio_projeto}
# 
#                         Diret√≥rios criados:
#                         {chr(10).join(f'- {d}' for d in diretorios_criados)}
# 
#                         Arquivos criados:
#                         {chr(10).join(f'- {f}' for f in arquivos_criados)}
# 
#                         Para executar o projeto, siga as instru√ß√µes no arquivo README.md
#                         """
#                     
#                     log_request(mensagem, modelo, "sucesso", resposta) # Logar sucesso
#                     return resposta
#                     
#             except Exception as e:
#                 last_error = e
#                 logger.error(f"Erro na tentativa {attempt + 1}: {str(e)}")
#                 if attempt < max_retries - 1:
#                     time.sleep(retry_delay)
#         
#         # Se todas as tentativas falharem, retornar o √∫ltimo erro
#         error_msg = f"Falha ao processar mensagem ap√≥s {max_retries} tentativas: {str(last_error)}"
#         logger.critical(error_msg)
#         log_request(mensagem, modelo, "erro", error_msg)
#         return f"Erro ao processar mensagem: {error_msg}\\n"
#     
#     Args:
#         mensagem: Mensagem do usu√°rio
#         modelo: Nome do modelo
#     
#     Returns:
#         Resposta do modelo
#     """
#     # Configura√ß√µes de retry
#     max_retries = 3
#     retry_delay = 5  # Aumentado para 5 segundos
#     request_timeout = 180  # Ser√° sobrescrito pelo timeout do modelo
#     
#     try:
#         # Verificar se o Ollama est√° dispon√≠vel
#         if not verificar_ollama():
#             log_request(mensagem, modelo, "erro", "Ollama n√£o dispon√≠vel")
#             return "Erro: O servi√ßo Ollama n√£o est√° dispon√≠vel. Por favor, verifique se o Ollama est√° rodando e tente novamente."
#         
#         # Verificar status do modelo
#         status = verificar_status_modelo(modelo)
#         if status["status"] == "error":
#             logger.warning(f"Modelo {modelo} n√£o encontrado, tentando continuar mesmo assim")
#         
#         # Determinar categoria e configura√ß√£o do modelo
#         categoria = None
#         for cat, config in MODELOS_CONFIG.items():
#             if modelo in config.modelos:
#                 categoria = cat
#                 request_timeout = config.timeout
#                 break
#         
#         if categoria is None:
#             logger.warning(f"Modelo {modelo} n√£o encontrado nas configura√ß√µes, usando timeout padr√£o")
#         
#         # Verificar se √© uma solicita√ß√£o de cria√ß√£o de c√≥digo
#         is_programming = any(keyword in mensagem.lower() for keyword in ["criar", "desenvolver", "fazer", "implementar", "c√≥digo", "programa", "site", "aplica√ß√£o"])
#         
#         if is_programming:
#             # Usar o modelo coder
#             modelo = "qwen2.5-coder:3b"
#             request_timeout = MODELOS_CONFIG[ModeloType.CODER].timeout
#             
#             # Criar diret√≥rio do projeto usando Path para lidar corretamente com caminhos
#             diretorio_projeto = Path.home() / "AgenteIA_Projetos" / f"projeto_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
#             diretorio_projeto = str(diretorio_projeto).replace("\\\\", "/")
#             os.makedirs(diretorio_projeto, exist_ok=True)
#             
#             # Preparar mensagem para o Ollama com instru√ß√µes mais claras sobre JSON
#             prompt = f"""
#             {system_message}
#             
#             Usu√°rio: {mensagem}
#             
#             Por favor, crie um projeto completo em {diretorio_projeto} com todos os arquivos necess√°rios.
#             Voc√™ DEVE usar o formato de a√ß√µes para criar os arquivos e diret√≥rios.
#             N√ÉO apenas descreva o c√≥digo, CRIE os arquivos usando as a√ß√µes.
#             
#             IMPORTANTE: 
#             1. Use barras normais (/) nos caminhos, n√£o use barras invertidas (\\\\)
#             2. O JSON deve ser v√°lido e bem formatado
#             3. Escape caracteres especiais no conte√∫do dos arquivos
#             4. Use aspas duplas para strings no JSON
#             5. N√£o use quebras de linha no JSON
#             6. Use \\\\n para quebras de linha no conte√∫do
#             7. Escape todas as aspas dentro do conte√∫do com \\\\\\\
#             """
#         else:
#             prompt = f"{system_message}\\n\\nUsu√°rio: {mensagem}"
#         
#         logger.info(f"Usando timeout de {request_timeout} segundos para o modelo {modelo}")
#         
#         # Chamar o Ollama com retry
#         last_error = None
#         for attempt in range(max_retries):
#             try:
#                 start_time = datetime.now()
#                 response = requests.post(
#                     "http://localhost:11434/api/generate",
#                     json={
#                         "model": modelo,
#                         "prompt": prompt,
#                         "stream": False
#                     },
#                     timeout=request_timeout
#                 )
#                 end_time = datetime.now()
#                 duration = (end_time - start_time).total_seconds()
#                 
#                 logger.info(f"Requisi√ß√£o conclu√≠da em {duration:.2f} segundos")
#                 
#                 if response.status_code == 200:
#                     resposta = response.json()["response"]
#                     logger.info(f"Resposta do modelo: {resposta[:200]}...")
#                     
#                     # Se for uma solicita√ß√£o de c√≥digo, processar a√ß√µes
#                     if is_programming:
#                         # Processar a√ß√µes na resposta
#                         linhas = resposta.split("\\n")
#                         arquivos_criados = []
#                         diretorios_criados = []
#                         
#                         for i, linha in enumerate(linhas):
#                             if linha.startswith("Action:"):
#                                 acao = linha.split("Action:")[1].strip()
#                                 if i + 1 < len(linhas) and linhas[i + 1].startswith("Action Input:"):
#                                     try:
#                                         # Extrair e limpar o JSON
#                                         input_str = linhas[i + 1].split("Action Input:")[1].strip()
#                                         input_str = input_str.replace("\\\\", "/")
#                                         
#                                         # Sanitizar JSON
#                                         sanitized_json_str = sanitizar_json(input_str) # Renamed to avoid conflict
#                                         if sanitized_json_str is None:
#                                             logger.error(f"N√£o foi poss√≠vel sanitizar o JSON: {input_str}")
#                                             continue
#                                             
#                                         parametros = json.loads(sanitized_json_str)
#                                         
#                                         # Validar par√¢metros obrigat√≥rios
#                                         if acao == "criar_diretorio":
#                                             if "caminho" not in parametros:
#                                                 logger.error("Par√¢metro 'caminho' n√£o encontrado para criar_diretorio")
#                                                 continue
#                                             
#                                             os.makedirs(parametros["caminho"], exist_ok=True)
#                                             diretorios_criados.append(parametros["caminho"])
#                                             logger.info(f"Diret√≥rio criado: {parametros['caminho']}")
#                                             
#                                         elif acao == "escrever_arquivo":
#                                             if "caminho" not in parametros or "conteudo" not in parametros:
#                                                 logger.error("Par√¢metros 'caminho' ou 'conteudo' n√£o encontrados para escrever_arquivo")
#                                                 continue
#                                             
#                                             # Criar diret√≥rio pai se n√£o existir
#                                             os.makedirs(os.path.dirname(parametros["caminho"]), exist_ok=True)
#                                             
#                                             # Escrever arquivo
#                                             with open(parametros["caminho"], "w", encoding="utf-8") as f:
#                                                 f.write(parametros["conteudo"])
#                                             arquivos_criados.append(parametros["caminho"])
#                                             logger.info(f"Arquivo criado: {parametros['caminho']}")
#                                             
#                                     except Exception as e:
#                                         logger.error(f"Erro ao executar a√ß√£o {acao}: {str(e)}")
#                                         continue
#                         
#                         # Adicionar informa√ß√µes do projeto
#                         resposta = f"""
#                         Projeto criado com sucesso em: {diretorio_projeto}
# 
#                         Diret√≥rios criados:
#                         {chr(10).join(f'- {d}' for d in diretorios_criados)}
# 
#                         Arquivos criados:
#                         {chr(10).join(f'- {f}' for f in arquivos_criados)}
# 
#                         Para executar o projeto, siga as instru√ß√µes no arquivo README.md
#                         """
#                     
#                     log_request(mensagem, modelo, "sucesso", resposta) # Logar sucesso
#                     return resposta
#                     
#             except Exception as e:
#                 last_error = e
#                 logger.error(f"Erro na tentativa {attempt + 1}: {str(e)}")
#                 if attempt < max_retries - 1:
#                     time.sleep(retry_delay)
#         
#         # Se todas as tentativas falharem, retornar o √∫ltimo erro
#         error_msg = f"Falha ao processar mensagem ap√≥s {max_retries} tentativas: {str(last_error)}"
#         logger.critical(error_msg)
#         log_request(mensagem, modelo, "erro", error_msg)
#         return f"Erro ao processar mensagem: {error_msg}\\n"

def processar_mensagem(mensagem: str) -> str:
    """
    Processa uma mensagem do usu√°rio usando AgenteIA.
    
    Args:
        mensagem: Mensagem do usu√°rio
    
    Returns:
        str: Resposta processada pelo AgenteIA
    """
    # Inicializar estado de processamento e progresso se n√£o existirem
    if 'is_processing' not in st.session_state:
        st.session_state.is_processing = False
    if 'progresso' not in st.session_state:
        st.session_state.progresso = 0
    if 'mensagem_progresso' not in st.session_state:
        st.session_state.mensagem_progresso = ""
    
    # Inicializar logger
    logger.info("=== IN√çCIO processar_mensagem (interface) ===")
    logger.info(f"Tipo de mensagem: {type(mensagem)}, Tamanho: {len(mensagem) if mensagem else 0}")
    
    # Verificar se j√° est√° processando
    if st.session_state.is_processing:
        logger.warning("Tentativa de processamento concorrente detectada")
        return "üîÅ J√° estou processando uma mensagem. Por favor, aguarde a conclus√£o antes de enviar uma nova solicita√ß√£o."
    
    # Atualizar estado de processamento
    st.session_state.is_processing = True
    st.session_state.progresso = 10
    st.session_state.mensagem_progresso = "Validando mensagem..."
    
    # Exibir barra de progresso inicial
    progress_bar = exibir_progresso("Iniciando processamento...", 10)
    
    # For√ßar atualiza√ß√£o da interface
    time.sleep(0.1)
    
    try:
        # Validar mensagem de entrada
        if not mensagem or not isinstance(mensagem, str) or not mensagem.strip():
            error_msg = "Por favor, insira uma mensagem v√°lida."
            logger.warning(f"Mensagem inv√°lida recebida: {mensagem}")
            return error_msg
        
        st.session_state.progresso = 20
        st.session_state.mensagem_progresso = "Verificando agente..."
        progress_bar = exibir_progresso(st.session_state.mensagem_progresso, st.session_state.progresso)
        time.sleep(0.1)
        
        # Verificar se o agente est√° pronto
        if "agente_ia" not in st.session_state or st.session_state.agente_ia is None:
            error_msg = "‚ùå O AgenteIA n√£o est√° pronto. Por favor, tente novamente em alguns instantes."
            logger.error(error_msg)
            return error_msg

        # Determinar se o modo coder deve ser sugerido ao AgenteIA
        programming_keywords = [
            "criar", "crie", "cria", "desenvolver", "desenvolva", "desenvolve", 
            "fazer", "fa√ßa", "faz", "implementar", "implemente", "implementa",
            "c√≥digo", "codigo", "programa", "programar", "site", "aplica√ß√£o", "aplicativo", 
            "jogo", "script", "python", "javascript", "java", "html", "css",
            "fun√ß√£o", "funcao", "classe", "arquivo"
        ]
        
        code_file_extensions = [
            ".py", ".js", ".java", ".html", ".css", ".cpp", ".c", ".cs", ".go", ".php", ".rb", ".swift", ".kt", ".ts"
        ]

        st.session_state.progresso = 30
        st.session_state.mensagem_progresso = "Analisando mensagem..."
        progress_bar = exibir_progresso(st.session_state.mensagem_progresso, st.session_state.progresso)
        time.sleep(0.1)
        
        logger.info("Analisando mensagem para determinar se √© uma solicita√ß√£o de programa√ß√£o...")
        lower_mensagem = mensagem.lower()
        
        is_keyword_match = any(keyword in lower_mensagem for keyword in programming_keywords)
        is_extension_match = any(ext in lower_mensagem for ext in code_file_extensions)
        is_programming_request = is_keyword_match or is_extension_match
        
        logger.info(f"Detec√ß√£o de programa√ß√£o - Palavras-chave: {is_keyword_match}, Extens√µes: {is_extension_match}")
        logger.info(f"Mensagem: '{mensagem[:100]}...'")
        logger.info(f"Sugest√£o para usar coder: {is_programming_request}")
        
        # Usar st.spinner para feedback visual
        with st.spinner("üîç Processando sua solicita√ß√£o..."):
            try:
                # Atualizar progresso
                st.session_state.progresso = 40
                st.session_state.mensagem_progresso = "Preparando processamento..."
                progress_bar = exibir_progresso(st.session_state.mensagem_progresso, st.session_state.progresso)
                time.sleep(0.1)
                
                # Chamar o m√©todo processar_mensagem do AgenteIA
                logger.info(f"Chamando processar_mensagem com usar_coder={is_programming_request}")
                
                # Configurar callbacks de progresso
                def atualizar_progresso(progresso: int, mensagem: str):
                    progresso_atual = 40 + int(progresso * 0.6)  # 40% a 100%
                    st.session_state.progresso = progresso_atual
                    st.session_state.mensagem_progresso = mensagem
                    nonlocal progress_bar
                    progress_bar = exibir_progresso(mensagem, progresso_atual)
                    time.sleep(0.05)  # Pequena pausa para atualiza√ß√£o da UI
                
                # Configurar o agente com os callbacks de progresso
                st.session_state.agente_ia.on_progress_update = atualizar_progresso
                
                # Processar a mensagem
                resposta = st.session_state.agente_ia.processar_mensagem(
                    mensagem=mensagem, 
                    usar_coder=is_programming_request
                )
                
                # Validar a resposta
                if not resposta or not isinstance(resposta, str):
                    error_msg = "‚ùå Desculpe, n√£o consegui processar sua solicita√ß√£o. A resposta foi inv√°lida ou vazia."
                    logger.warning(f"Resposta inv√°lida do AgenteIA. Tipo: {type(resposta)}, Valor: {resposta}")
                    return error_msg
                
                # Limpar mensagens de erro anteriores, se houver
                if "error_message" in st.session_state:
                    del st.session_state.error_message
                
                # Atualizar progresso para conclu√≠do
                st.session_state.progresso = 100
                st.session_state.mensagem_progresso = "Processamento conclu√≠do!"
                progress_bar = exibir_progresso(st.session_state.mensagem_progresso, st.session_state.progresso)
                time.sleep(0.5)  # Mostrar mensagem de conclus√£o
                
                logger.info(f"Resposta recebida. Tamanho: {len(resposta)} caracteres")
                logger.debug(f"Primeiros 200 caracteres da resposta: {resposta[:200]}...")
                
                return resposta
                
            except requests.exceptions.ConnectionError as ce:
                error_msg = "üîå Erro de conex√£o: N√£o foi poss√≠vel conectar ao servi√ßo de IA. Verifique sua conex√£o com a internet."
                logger.error(f"Erro de conex√£o: {str(ce)}")
                st.session_state.progresso = 0
                st.session_state.mensagem_progresso = "Erro de conex√£o"
                return error_msg
                
            except requests.exceptions.Timeout as te:
                error_msg = "‚è±Ô∏è A opera√ß√£o demorou muito para ser conclu√≠da. Por favor, tente novamente com uma solicita√ß√£o mais espec√≠fica."
                logger.error(f"Timeout ao processar mensagem: {str(te)}")
                st.session_state.progresso = 0
                st.session_state.mensagem_progresso = "Tempo esgotado"
                return error_msg
                
            except Exception as agent_error:
                error_msg = f"‚ö†Ô∏è Ocorreu um erro ao processar sua mensagem: {str(agent_error)}"
                logger.error(f"Erro durante o processamento pelo AgenteIA: {str(agent_error)}", exc_info=True)
                st.session_state.progresso = 0
                st.session_state.mensagem_progresso = "Erro no processamento"
                return error_msg
            
    except Exception as e:
        logger.error(f"Erro cr√≠tico ao processar mensagem: {str(e)}", exc_info=True)
        error_type = type(e).__name__
        
        # Resetar estado de processamento
        st.session_state.progresso = 0
        st.session_state.mensagem_progresso = "Erro cr√≠tico"
        
        # Mensagem amig√°vel para o usu√°rio
        error_msgs = {
            "TimeoutError": "‚è±Ô∏è A opera√ß√£o demorou muito para ser conclu√≠da. Tente novamente mais tarde.",
            "ConnectionError": "üîå Erro de conex√£o. Verifique sua internet e tente novamente.",
            "RuntimeError": "‚ö†Ô∏è Ocorreu um erro inesperado. Tente novamente ou entre em contato com o suporte.",
            "default": f"‚ùå Ocorreu um erro inesperado: {str(e)}. Por favor, tente novamente mais tarde."
        }
        
        return error_msgs.get(error_type, error_msgs["default"])
        
    finally:
        # Sempre marcar como n√£o processando, mesmo em caso de erro
        st.session_state.is_processing = False
        
        # Limpar mensagem de progresso ap√≥s um curto per√≠odo
        def limpar_mensagem():
            time.sleep(3)
            if 'mensagem_progresso' in st.session_state:
                st.session_state.mensagem_progresso = ""
        
        # Iniciar thread para limpar mensagem
        import threading
        threading.Thread(target=limpar_mensagem, daemon=True).start()
        
        logger.info("=== FIM processar_mensagem (interface) ===\n")

def limpar_fila() -> None:
    """
    Limpa a fila de requisi√ß√µes pendentes.
    """
    try:
        with processing_lock:
            # Limpar fila
            while not request_queue.empty():
                try:
                    request_queue.get_nowait()
                    request_queue.task_done()
                except queue.Empty:
                    break
            
            # Limpar status e requisi√ß√µes ativas
            request_status.clear()
            active_requests.clear()
            
            logger.info("Fila de requisi√ß√µes limpa")
        
    except Exception as e:
        logger.error(f"Erro ao limpar fila: {e}")

def listar_unidades() -> None:
    """
    Lista as unidades dispon√≠veis no sistema.
    """
    try:
        ferramenta = ListarUnidades()
        unidades = ferramenta._run()
        
        # Criar colunas para melhor visualiza√ß√£o
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("### üìÅ Unidades Dispon√≠veis")
            st.text(unidades)
        
        with col2:
            st.markdown("### üìä Informa√ß√µes")
            st.info("""
            - Clique em uma unidade para listar seus arquivos
            - O diret√≥rio de projetos √© criado automaticamente
            - Arquivos grandes s√£o marcados com ‚ö†Ô∏è
            """)
            
    except Exception as e:
        st.error(f"Erro ao listar unidades: {e}")

def listar_arquivos_diretorio(diretorio: str) -> None:
    """
    Lista os arquivos em um diret√≥rio.
    
    Args:
        diretorio: Caminho do diret√≥rio
    """
    try:
        # Normalizar caminho
        diretorio = diretorio.strip('"\'')  # Remove aspas extras
        diretorio = os.path.normpath(diretorio)
        
        ferramenta = ListarArquivos()
        arquivos = ferramenta._run(diretorio)
        
        # Criar colunas para melhor visualiza√ß√£o
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"### üìÇ Conte√∫do de {diretorio}")
            st.text(arquivos)
        
        with col2:
            st.markdown("### üîç A√ß√µes")
            if st.button("üìã Copiar Caminho"):
                st.code(diretorio)
            
            if st.button("üîÑ Atualizar"):
                st.rerun()
            
            st.markdown("### ‚ÑπÔ∏è Dicas")
            st.info("""
            - Use o bot√£o 'Copiar Caminho' para facilitar a navega√ß√£o
            - Clique em 'Atualizar' para ver as √∫ltimas altera√ß√µes
            - Arquivos grandes s√£o marcados com ‚ö†Ô∏è
            - N√£o use aspas nos caminhos
            """)
            
    except Exception as e:
        st.error(f"Erro ao listar arquivos: {e}")

def scroll_down() -> None:
    """Rola a p√°gina para baixo automaticamente."""
    js = """
    <script>
        // Rola para o final da p√°gina
        window.parent.document.querySelector('.main').scrollTo(0, window.parent.document.querySelector('.main').scrollHeight);
    </script>
    """
    components.html(js, height=0)

def main():
    """Fun√ß√£o principal da interface."""
    try:
        # Exibir menu
        exibir_menu()
        
    except Exception as e:
        st.error(f"Erro na interface: {e}")

if __name__ == "__main__":
    main() 